<Activity mc:Ignorable="sap sap2010" x:Class="Sequence___Video_Demo___Working_with_Excel_files_1" mva:VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="1120.8,1886.4" sap2010:WorkflowViewState.IdRef="Sequence___Video_Demo___Working_with_Excel_files_1_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="23">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="18">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Reading data from two files with different extensions, filtering the data tables and bringing the data together, and writing the data to a different file&#xD;&#xA;&#xD;&#xA;Video Transcript&#xD;&#xA;+&#xD;&#xA;Download&#xD;&#xA;Please find below for download the Workflow for the Video Demo above.&#xD;&#xA;&#xD;&#xA;Excel Demo 1 (Workflow).zip&#xD;&#xA;31.7 KB&#xD;&#xA;&#xD;&#xA;Let's recap the Activities and Methods used&#xD;&#xA;We used a Read Range activity from the Workbook category of activities to read the data from the .xslx file and store it in a newly created DataTable variable.&#xD;&#xA;Reading the data from the .xls file was done through a Read Range activity from the Excel category, placed in an Excel Application Scope container. The data read was stored in another newly created DataTable variable.&#xD;&#xA;We used 2 Filter Data Table activities to keep only the rows that met the criterion set: the value in the column containing the founding year (having a different name in each of the two variables) is lower than (&quot;&lt;&quot;) 2005.00. The Keep radio button had to be selected, and in the Output tab, the order of the columns was changed.&#xD;&#xA;We created a new DataTable variable to bring together the values from both DataTable variables created in the Read Range stage. We used the Build Data Table activity to define the data type for each column, the name and configure the other options.&#xD;&#xA;In order to bring the values in the new DataTable variable, we used 2 For Each Row activities to loop through each of the two initial DataTable variables. In the body of the 2 activities we added an Add Data Row activity to add each row in the new DataTable by using the row.ItemArray method under ArrayRow.&#xD;&#xA;We used a Write Range activity in an Excel Application Scope container to write the data from the DataTable variable to the output .xlsx document. Write Range overwrote all the previous data in the specified sheet.&#xD;&#xA;Video Demo - Working with Excel files 2&#xD;&#xA;Filtering data from a database and exporting the results into a new file&#xD;&#xA;&#xD;&#xA;Video Transcript&#xD;&#xA;+&#xD;&#xA;Download&#xD;&#xA;Please find below for download the Workflow for the Video Demo above.&#xD;&#xA;&#xD;&#xA;Demo Excel 2 (Workflow).zip&#xD;&#xA;43.2 KB&#xD;&#xA;&#xD;&#xA;Let's recap the Activities and Methods used&#xD;&#xA;We used a Workbook Read Range activity to read the data from the .xlsx file and store it in a newly created DataTable variable.&#xD;&#xA;We used the Filter Data Table activity to keep only the employees younger than 30 and earning more than 100 000. For this, we checked the Keep option and added two criteria, using the names of the columns in the input file and DataTable: &quot;Age&quot; &lt; 30.00 and &quot;Income&quot; &gt; 100000.00. The operator has to be &quot;And&quot;. We didn't change anything in the output tab to keep all the data from the original file.&#xD;&#xA;We used Build Data Table to create a new DataTable variable in which to store only the information of interest from the filtered DataTable - name, age and income. For this, we defined 3 columns of String type in the Build Data Table wizard, all with names of choice.&#xD;&#xA;We used a For Each Row activity to loop through all the rows in the initial DataTable variable, with the following activities in the Body:&#xD;&#xA;2 Get Row Item to extract the name and the age, by specifying the name of the column under ColumnName and row under Row (in the Properties panel). We have also created 2 variables in the Output field, called &quot;name&quot; and &quot;age&quot;.&#xD;&#xA;An Assign activity to extract the income, by creating a new variable (&quot;income&quot;) and using the row.ItemArray method, followed by the index of the column of interest and .toString;&#xD;&#xA;An Add Data Row activity to add the content of the 3 variables in the new DataTable, using the names of the 3 variables between curly brackets under ArrayRow in the Properties panel, as well as the name of the new DataTable variable;&#xD;&#xA;To write the data in the output Excel file, we have used an Excel Application Scope container and a Write Range activity with the AddHeaders option checked.&#xD;&#xA;Documentation&#xD;&#xA;&#xD;&#xA;UiPath Activities Guide&#xD;&#xA;Excel Activities (Excel App Integration)&#xD;&#xA;Go to Link&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;-----------------&#xD;&#xA;Let's recap the Activities and Methods used&#xD;&#xA;&#xD;&#xA;We used a Read Range activity from the Workbook category of activities to read the data from the .xslx file and store it in a newly created DataTable variable.&#xD;&#xA;&#xD;&#xA;Reading the data from the .xls file was done through a Read Range activity from the Excel category, placed in an Excel Application Scope container. The data read was stored in another newly created DataTable variable.&#xD;&#xA;&#xD;&#xA;We used 2 Filter Data Table activities to keep only the rows that met the criterion set: the value in the column containing the founding year (having a different name in each of the two variables) is lower than (&quot;&lt;&quot;) 2005.00. The Keep radio button had to be selected, and in the Output tab, the order of the columns was changed.&#xD;&#xA;&#xD;&#xA;We created a new DataTable variable to bring together the values from both DataTable variables created in the Read Range stage. We used the Build Data Table activity to define the data type for each column, the name and configure the other options.&#xD;&#xA;&#xD;&#xA;In order to bring the values in the new DataTable variable, we used 2 For Each Row activities to loop through each of the two initial DataTable variables. In the body of the 2 activities we added an Add Data Row activity to add each row in the new DataTable by using the row.ItemArray method under ArrayRow.&#xD;&#xA;&#xD;&#xA;We used a Write Range activity in an Excel Application Scope container to write the data from the DataTable variable to the output .xlsx document. Write Range overwrote all the previous data in the specified sheet.&#xD;&#xA;&#xD;&#xA;" DisplayName="Sequence___Video_Demo___Working_with_Excel_files_1" sap:VirtualizedContainerService.HintSize="475.2,1721.6" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="DTXlsx" />
      <Variable x:TypeArguments="sd:DataTable" Name="DTXls" />
      <Variable x:TypeArguments="sd:DataTable" Name="FilteredCompanies" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ReadRange AddHeaders="True" DataTable="[DTXlsx]" DisplayName="Read Range XLSX" sap:VirtualizedContainerService.HintSize="433.6,88" sap2010:WorkflowViewState.IdRef="ReadRange_1" SheetName="Sheet1" WorkbookPath="Data1.xlsx">
      <ui:ReadRange.Range>
        <InArgument x:TypeArguments="x:String">
          <Literal x:TypeArguments="x:String" Value="" />
        </InArgument>
      </ui:ReadRange.Range>
    </ui:ReadRange>
    <ui:ExcelApplicationScope Password="{x:Null}" DisplayName="Excel Application Scope - XLS" sap:VirtualizedContainerService.HintSize="433.6,262.4" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" WorkbookPath="Data2.xls">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="375.2,152.8" sap2010:WorkflowViewState.IdRef="Sequence_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelReadRange AddHeaders="True" DataTable="[DTXls]" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" SheetName="Sheet1">
              <ui:ExcelReadRange.Range>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:ExcelReadRange.Range>
            </ui:ExcelReadRange>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
    <ui:FilterDataTable DataTable="[DTXlsx]" DisplayName="Filter Data Table" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="433.6,60" sap2010:WorkflowViewState.IdRef="FilterDataTable_1" OutputDataTable="[DTXlsx]" SelectColumnsMode="Keep">
      <ui:FilterDataTable.Filters>
        <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
          <ui:FilterOperationArgument BooleanOperator="And" Operator="LT">
            <ui:FilterOperationArgument.Column>
              <InArgument x:TypeArguments="x:String">["Founding Year"]</InArgument>
            </ui:FilterOperationArgument.Column>
            <ui:FilterOperationArgument.Operand>
              <InArgument x:TypeArguments="x:Double">[2005.00]</InArgument>
            </ui:FilterOperationArgument.Operand>
          </ui:FilterOperationArgument>
        </scg:List>
      </ui:FilterDataTable.Filters>
      <ui:FilterDataTable.SelectColumns>
        <scg:List x:TypeArguments="InArgument" Capacity="4">
          <InArgument x:TypeArguments="x:String">["Company"]</InArgument>
          <InArgument x:TypeArguments="x:String">["Revenue"]</InArgument>
          <InArgument x:TypeArguments="x:String">["Founding Year"]</InArgument>
        </scg:List>
      </ui:FilterDataTable.SelectColumns>
    </ui:FilterDataTable>
    <ui:FilterDataTable DataTable="[DTXls]" DisplayName="Filter Data Table" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="433.6,60" sap2010:WorkflowViewState.IdRef="FilterDataTable_2" OutputDataTable="[DTXls]" SelectColumnsMode="Keep">
      <ui:FilterDataTable.Filters>
        <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
          <ui:FilterOperationArgument BooleanOperator="And" Operator="LT">
            <ui:FilterOperationArgument.Column>
              <InArgument x:TypeArguments="x:String">["Founding"]</InArgument>
            </ui:FilterOperationArgument.Column>
            <ui:FilterOperationArgument.Operand>
              <InArgument x:TypeArguments="x:Double">[2005.00]</InArgument>
            </ui:FilterOperationArgument.Operand>
          </ui:FilterOperationArgument>
        </scg:List>
      </ui:FilterDataTable.Filters>
      <ui:FilterDataTable.SelectColumns>
        <scg:List x:TypeArguments="InArgument" Capacity="4">
          <InArgument x:TypeArguments="x:String">["Company Name"]</InArgument>
          <InArgument x:TypeArguments="x:String">["Revenue"]</InArgument>
          <InArgument x:TypeArguments="x:String">["Founding"]</InArgument>
        </scg:List>
      </ui:FilterDataTable.SelectColumns>
    </ui:FilterDataTable>
    <ui:BuildDataTable DataTable="[FilteredCompanies]" DisplayName="Build Data Table" sap:VirtualizedContainerService.HintSize="433.6,60" sap2010:WorkflowViewState.IdRef="BuildDataTable_1" TableInfo="&lt;NewDataSet&gt;&#xD;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xD;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xD;&#xA;      &lt;xs:complexType&gt;&#xD;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xD;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xD;&#xA;            &lt;xs:complexType&gt;&#xD;&#xA;              &lt;xs:sequence&gt;&#xD;&#xA;                &lt;xs:element name=&quot;Company&quot;&gt;&#xD;&#xA;                  &lt;xs:simpleType&gt;&#xD;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xD;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xD;&#xA;                    &lt;/xs:restriction&gt;&#xD;&#xA;                  &lt;/xs:simpleType&gt;&#xD;&#xA;                &lt;/xs:element&gt;&#xD;&#xA;                &lt;xs:element name=&quot;Revenue&quot;&gt;&#xD;&#xA;                  &lt;xs:simpleType&gt;&#xD;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xD;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xD;&#xA;                    &lt;/xs:restriction&gt;&#xD;&#xA;                  &lt;/xs:simpleType&gt;&#xD;&#xA;                &lt;/xs:element&gt;&#xD;&#xA;                &lt;xs:element name=&quot;Founding&quot; type=&quot;xs:int&quot; /&gt;&#xD;&#xA;              &lt;/xs:sequence&gt;&#xD;&#xA;            &lt;/xs:complexType&gt;&#xD;&#xA;          &lt;/xs:element&gt;&#xD;&#xA;        &lt;/xs:choice&gt;&#xD;&#xA;      &lt;/xs:complexType&gt;&#xD;&#xA;    &lt;/xs:element&gt;&#xD;&#xA;  &lt;/xs:schema&gt;&#xD;&#xA;&lt;/NewDataSet&gt;" />
    <ui:ForEachRow CurrentIndex="{x:Null}" DataTable="[DTXlsx]" DisplayName="For Each Row - XLSX" sap:VirtualizedContainerService.HintSize="433.6,264" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
      <ui:ForEachRow.Body>
        <ActivityAction x:TypeArguments="sd:DataRow">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="241.6,115.2" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[row.ItemArray]" DataTable="[FilteredCompanies]" DisplayName="Add Data Row" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="AddDataRow_1" />
          </Sequence>
        </ActivityAction>
      </ui:ForEachRow.Body>
    </ui:ForEachRow>
    <ui:ForEachRow CurrentIndex="{x:Null}" DataTable="[DTXls]" DisplayName="For Each Row - XLS" sap:VirtualizedContainerService.HintSize="433.6,264" sap2010:WorkflowViewState.IdRef="ForEachRow_2">
      <ui:ForEachRow.Body>
        <ActivityAction x:TypeArguments="sd:DataRow">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="241.6,115.2" sap2010:WorkflowViewState.IdRef="Sequence_4">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[row.ItemArray]" DataTable="[FilteredCompanies]" DisplayName="Add Data Row" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="AddDataRow_2" />
          </Sequence>
        </ActivityAction>
      </ui:ForEachRow.Body>
    </ui:ForEachRow>
    <ui:ExcelApplicationScope Password="{x:Null}" DisplayName="Excel Application Scope" sap:VirtualizedContainerService.HintSize="433.6,290.4" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_2" WorkbookPath="Output\CompaniesBefore2005.xlsx">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="375.2,180.8" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelWriteRange AddHeaders="True" DataTable="[FilteredCompanies]" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_1" SheetName="Sheet1" StartingCell="A1" />
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
  </Sequence>
</Activity>